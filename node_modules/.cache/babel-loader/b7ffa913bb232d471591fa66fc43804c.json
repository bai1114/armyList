{"ast":null,"code":"var _jsxFileName = \"/Users/Flora/myapp/src/containers/Pagination/index.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPage, getCount, setStatusCurPage, resetRedirect } from '../../redux/action-creators';\n\nclass Pagination extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setCurPage = curPage => {\n      this.props.getCount();\n      this.props.fetchPage(curPage, 5);\n      const pageSize = this.props.pageSize;\n      const count = this.props.count;\n      const pageNumber = [];\n      const totalPages = Math.ceil(count / pageSize);\n      let startPage = 1,\n          endPage = totalPages;\n      console.log('setcurpage count is', count);\n\n      for (let i = startPage; i <= endPage; i++) {\n        pageNumber.push(i);\n        console.log('already pushed', pageNumber);\n      }\n\n      this.setState({\n        pageNumber\n      });\n    };\n\n    const _pageSize = this.props.pageSize;\n    const _count = this.props.count;\n    const numberList = [];\n\n    const _totalPages = Math.ceil(_count / _pageSize);\n\n    let _startPage = 1,\n        _endPage = _totalPages;\n    console.log('setcurpage count is', _count);\n\n    for (let i = _startPage; i <= _endPage; i++) {\n      numberList.push(i);\n      console.log('already pushed', numberList);\n    }\n\n    this.state = {\n      pageNumber: numberList\n    };\n  } // componentDidMount() {\n  //   this.props.getCount();\n  //   //this.setCurPage(1);\n  //   //this.props.resetRedirect();\n  // }\n  //一会加上\n\n\n  componentDidUpdate(prevProps) {\n    if (this.props.count !== prevProps.count) {\n      this.setCurPage(this.props.status.curPage);\n      console.log('componentDidUpdate prevpros count', prevProps.count);\n    } //console.log('componentDidUpdate count', this.props.count);\n\n  }\n\n  render() {\n    // const pageProp = this.props.page;\n    // const pageNumber = this.state.pageNumber;\n    // const { count } = pageProp.count;\n    // const { pageSize } = pageProp.pageSize;\n    // const totalPages = Math.ceil(count / pageSize);\n    //this.props.getCount();\n    const pageNumber = this.state.pageNumber;\n    const count = this.props.count;\n    const pageSize = this.props.pageSize;\n    const totalPages = Math.ceil(count / pageSize);\n    console.log('totalpage is ', totalPages);\n    console.log('~Testing count is~~ ', count);\n    console.log('~Testing pageNumber is~~ ', pageNumber);\n    console.log('~Testing pageSize is~~ ', pageSize);\n    return (// <ul className=\"pagination\">\n      //   <li className=\"page-item\">\n      //     {this.props.curPage === 1 ? '' : <a className=\"page-link\" onClick={() => this.setCurPage(this.props.curPage - 1)} >Previous</a>}\n      //   </li>\n      // {pageNumber.map(page => {\n      //   return (\n      //     <li key={page} className=\"page-item\">\n      //       <a onClick={() => this.setCurPage(page)} className=\"page-link\">{page}</a>\n      //     </li>\n      //   );\n      // })}\n      //   <li className=\"page-item\">\n      //     {this.props.curPage === totalPages ? '' : <a onClick={() => this.setCurPage(this.props.curPage + 1)} className=\"page-link\" >Next</a>}\n      //   </li>\n      // </ul>\n      React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, this.props.curPage === 1 ? '' : React.createElement(\"button\", {\n        className: \"page-link\",\n        onClick: () => this.setCurPage(this.props.curPage - 1),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"Previous\")), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, pageNumber.map(page => {\n        return React.createElement(\"div\", {\n          key: page,\n          className: \"page-item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          onClick: () => this.setCurPage(page),\n          className: \"page-link\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, page));\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, this.props.curPage === totalPages ? '' : React.createElement(\"button\", {\n        onClick: () => this.setCurPage(this.props.curPage + 1),\n        className: \"page-link\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"Next\")))\n    );\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    status: state.status,\n    pageOfUsers: state.getUsers.pageOfUsers,\n    curPage: state.getUsers.curPage,\n    pageSize: state.getUsers.pageSize,\n    count: state.getUsers.count\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    resetRedirect: () => {\n      dispatch(resetRedirect());\n    },\n    fetchPage: (page, size) => {\n      dispatch(fetchPage(page, size));\n    },\n    setStatusCurPage: page => {\n      dispatch(setStatusCurPage(page));\n    },\n    getCount: () => {\n      dispatch(getCount());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Pagination);","map":{"version":3,"sources":["/Users/Flora/myapp/src/containers/Pagination/index.js"],"names":["React","Component","connect","fetchPage","getCount","setStatusCurPage","resetRedirect","Pagination","constructor","props","setCurPage","curPage","pageSize","count","pageNumber","totalPages","Math","ceil","startPage","endPage","console","log","i","push","setState","numberList","state","componentDidUpdate","prevProps","status","render","map","page","mapStateToProps","pageOfUsers","getUsers","mapDispatchToProps","dispatch","size"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPage, getCount, setStatusCurPage, resetRedirect } from '../../redux/action-creators';\n\nclass Pagination extends Component {\n  constructor(props) {\n    super(props);\n    const pageSize = this.props.pageSize;\n    const count = this.props.count;\n    const numberList = [];\n  \n    const totalPages = Math.ceil(count / pageSize);\n    let startPage = 1, endPage = totalPages;\n    console.log('setcurpage count is', count);\n    for (let i = startPage; i <= endPage; i++) {\n      numberList.push(i);\n      console.log('already pushed', numberList);\n    }\n    this.state = {\n      pageNumber: numberList\n    };\n  }\n\n  // componentDidMount() {\n  //   this.props.getCount();\n  //   //this.setCurPage(1);\n  //   //this.props.resetRedirect();\n  // }\n\n  //一会加上\n  componentDidUpdate(prevProps) {\n    if (this.props.count !== prevProps.count) {\n      this.setCurPage(this.props.status.curPage);\n      console.log('componentDidUpdate prevpros count', prevProps.count);\n    }\n    //console.log('componentDidUpdate count', this.props.count);\n\n  }\n\n  setCurPage = curPage => {\n    this.props.getCount();\n    this.props.fetchPage(curPage, 5);\n    const pageSize = this.props.pageSize;\n    const count = this.props.count;\n    const pageNumber = [];\n  \n    const totalPages = Math.ceil(count / pageSize);\n    let startPage = 1, endPage = totalPages;\n    console.log('setcurpage count is', count);\n    for (let i = startPage; i <= endPage; i++) {\n      pageNumber.push(i);\n      console.log('already pushed', pageNumber);\n    }\n    this.setState({pageNumber});\n  };\n\n\n\n  render() {\n    // const pageProp = this.props.page;\n    // const pageNumber = this.state.pageNumber;\n    // const { count } = pageProp.count;\n    // const { pageSize } = pageProp.pageSize;\n    // const totalPages = Math.ceil(count / pageSize);\n    //this.props.getCount();\n    const pageNumber = this.state.pageNumber;\n    const count = this.props.count;\n    const pageSize = this.props.pageSize;\n    const totalPages = Math.ceil(count / pageSize);\n    console.log('totalpage is ', totalPages);\n    console.log('~Testing count is~~ ', count);\n    console.log('~Testing pageNumber is~~ ', pageNumber);\n    console.log('~Testing pageSize is~~ ', pageSize);\n    return (\n      // <ul className=\"pagination\">\n      //   <li className=\"page-item\">\n      //     {this.props.curPage === 1 ? '' : <a className=\"page-link\" onClick={() => this.setCurPage(this.props.curPage - 1)} >Previous</a>}\n      //   </li>\n        // {pageNumber.map(page => {\n        //   return (\n        //     <li key={page} className=\"page-item\">\n        //       <a onClick={() => this.setCurPage(page)} className=\"page-link\">{page}</a>\n        //     </li>\n        //   );\n        // })}\n      //   <li className=\"page-item\">\n      //     {this.props.curPage === totalPages ? '' : <a onClick={() => this.setCurPage(this.props.curPage + 1)} className=\"page-link\" >Next</a>}\n      //   </li>\n      // </ul>\n      <div>\n        <div>\n          {this.props.curPage === 1 ? '' : <button className=\"page-link\" onClick={() => this.setCurPage(this.props.curPage - 1)} >Previous</button>}\n        </div>\n        <div>\n          {pageNumber.map(page => {\n            return (\n              <div key={page} className=\"page-item\">\n                <button onClick={() => this.setCurPage(page)} className=\"page-link\">{page}</button>\n              </div>\n            );\n          })}\n        </div>\n        <div>\n          {this.props.curPage === totalPages ? '' : <button onClick={() => this.setCurPage(this.props.curPage + 1)} className=\"page-link\" >Next</button>}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    status: state.status,\n    pageOfUsers: state.getUsers.pageOfUsers,\n    curPage: state.getUsers.curPage,\n    pageSize: state.getUsers.pageSize,\n    count: state.getUsers.count\n  };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    resetRedirect: () => {\n      dispatch(resetRedirect());\n    },\n    fetchPage: (page, size) => {\n      dispatch(fetchPage(page, size));\n    },\n    setStatusCurPage: (page) => {\n      dispatch(setStatusCurPage(page));\n    },\n    getCount: () => {\n      dispatch(getCount());\n    }\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Pagination);"]},"metadata":{},"sourceType":"module"}