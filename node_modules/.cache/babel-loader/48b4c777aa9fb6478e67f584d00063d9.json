{"ast":null,"code":"var _jsxFileName = \"/Users/Flora/myapp/src/containers/Pagination/index.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPage, setStatusCurPage, resetRedirect } from '../../redux/action-creators';\n\nclass Pagination extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setCurPage = curPage => {\n      //const { dispatch } = this.props;\n      this.props.getCount();\n      this.props.fetchPage(curPage, 5); // this.props.setStatusCurPage(curPage);\n      // dispatch(fetchPage(curPage, 5));\n      // dispatch(setStatusCurPage(curPage));\n\n      const pageSize = this.props.pageSize;\n      const count = this.props.count;\n      const pageNumber = [];\n      const totalPages = Math.ceil(count / pageSize);\n      console.log('Testing totalPages is~~ ', totalPages);\n      let startPage = 1,\n          endPage = totalPages;\n\n      for (let i = startPage; i <= endPage; i++) {\n        pageNumber.push(i);\n      }\n\n      this.setState({\n        pageNumber\n      }); //console.log('Testing pageProp is~~ ', this.props.pageProp);\n\n      console.log('Testing count is~~ ', count);\n      console.log('Testing pageNumber is~~ ', pageNumber);\n      console.log('Testing pageSize is~~ ', pageSize);\n    };\n\n    this.state = {\n      pageNumber: []\n    };\n  } // componentDidMount() {\n  //   this.setCurPage(1);\n  //   this.props.resetRedirect();\n  // }\n  //一会加上\n\n\n  componentDidUpdate(prevProps) {\n    if (this.props.count !== prevProps.page.count) {\n      this.setCurPage(this.props.status.curPage);\n    }\n\n    console.log('componentDidUpdate count', this.props.count);\n  }\n\n  render() {\n    // const pageProp = this.props.page;\n    // const pageNumber = this.state.pageNumber;\n    // const { count } = pageProp.count;\n    // const { pageSize } = pageProp.pageSize;\n    // const totalPages = Math.ceil(count / pageSize);\n    const pageNumber = this.state.pageNumber;\n    const count = this.props.count.count;\n    const pageSize = this.props.pageSize.pageSize;\n    const totalPages = Math.ceil(count / pageSize);\n    return React.createElement(\"ul\", {\n      className: \"pagination\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      className: \"page-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, this.props.curPage === 1 ? '' : React.createElement(\"a\", {\n      className: \"page-link\",\n      onClick: () => this.setCurPage(this.props.curPage - 1),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Previous\")), pageNumber.map(page => {\n      return React.createElement(\"li\", {\n        key: page,\n        className: \"page-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        onClick: () => this.setCurPage(page),\n        className: \"page-link\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, page));\n    }), React.createElement(\"li\", {\n      className: \"page-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, this.props.curPage === totalPages ? '' : React.createElement(\"a\", {\n      onClick: () => this.setCurPage(this.props.curPage + 1),\n      className: \"page-link\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Next\")));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    status: state.status,\n    pageOfUsers: state.getUsers.pageOfUsers,\n    curPage: state.getUsers.curPage,\n    pageSize: state.getUsers.pageSize,\n    count: state.getUsers.count\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    resetRedirect: () => {\n      dispatch(resetRedirect());\n    },\n    fetchPage: (page, size) => {\n      dispatch(fetchPage(page, size));\n    },\n    setStatusCurPage: page => {\n      dispatch(setStatusCurPage(page));\n    },\n    getCount: () => {\n      dispatch(getCount());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Pagination);","map":{"version":3,"sources":["/Users/Flora/myapp/src/containers/Pagination/index.js"],"names":["React","Component","connect","fetchPage","setStatusCurPage","resetRedirect","Pagination","constructor","props","setCurPage","curPage","getCount","pageSize","count","pageNumber","totalPages","Math","ceil","console","log","startPage","endPage","i","push","setState","state","componentDidUpdate","prevProps","page","status","render","map","mapStateToProps","pageOfUsers","getUsers","mapDispatchToProps","dispatch","size"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPage, setStatusCurPage, resetRedirect } from '../../redux/action-creators';\n\nclass Pagination extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pageNumber: []\n    };\n  }\n\n  // componentDidMount() {\n  //   this.setCurPage(1);\n  //   this.props.resetRedirect();\n  // }\n\n  //一会加上\n  componentDidUpdate(prevProps) {\n    if (this.props.count !== prevProps.page.count) {\n      this.setCurPage(this.props.status.curPage);\n    }\n    console.log('componentDidUpdate count', this.props.count);\n  }\n\n  setCurPage = curPage => {\n    //const { dispatch } = this.props;\n    this.props.getCount();\n    this.props.fetchPage(curPage, 5);\n    // this.props.setStatusCurPage(curPage);\n    // dispatch(fetchPage(curPage, 5));\n    // dispatch(setStatusCurPage(curPage));\n    const pageSize = this.props.pageSize;\n    const count = this.props.count;\n    const pageNumber = [];\n  \n    const totalPages = Math.ceil(count / pageSize);\n    console.log('Testing totalPages is~~ ', totalPages);\n    let startPage = 1, endPage = totalPages;\n    for (let i = startPage; i <= endPage; i++) {\n      pageNumber.push(i);\n    }\n    this.setState({ pageNumber });\n\n    //console.log('Testing pageProp is~~ ', this.props.pageProp);\n    console.log('Testing count is~~ ', count);\n    console.log('Testing pageNumber is~~ ', pageNumber);\n    console.log('Testing pageSize is~~ ', pageSize);\n  };\n\n\n\n  render() {\n    // const pageProp = this.props.page;\n    // const pageNumber = this.state.pageNumber;\n    // const { count } = pageProp.count;\n    // const { pageSize } = pageProp.pageSize;\n    // const totalPages = Math.ceil(count / pageSize);\n    const pageNumber = this.state.pageNumber;\n    const { count } = this.props.count;\n    const { pageSize } = this.props.pageSize;\n    const totalPages = Math.ceil(count / pageSize);\n    return (\n      <ul className=\"pagination\">\n        <li className=\"page-item\">\n          {this.props.curPage === 1 ? '' : <a className=\"page-link\" onClick={() => this.setCurPage(this.props.curPage - 1)} >Previous</a>}\n        </li>\n        {pageNumber.map(page => {\n          return (\n            <li key={page} className=\"page-item\">\n              <a onClick={() => this.setCurPage(page)} className=\"page-link\">{page}</a>\n            </li>\n          );\n        })}\n        <li className=\"page-item\">\n          {this.props.curPage === totalPages ? '' : <a onClick={() => this.setCurPage(this.props.curPage + 1)} className=\"page-link\" >Next</a>}\n        </li>\n      </ul>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    status: state.status,\n    pageOfUsers: state.getUsers.pageOfUsers,\n    curPage: state.getUsers.curPage,\n    pageSize: state.getUsers.pageSize,\n    count: state.getUsers.count\n  };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    resetRedirect: () => {\n      dispatch(resetRedirect());\n    },\n    fetchPage: (page, size) => {\n      dispatch(fetchPage(page, size));\n    },\n    setStatusCurPage: (page) => {\n      dispatch(setStatusCurPage(page));\n    },\n    getCount: () => {\n      dispatch(getCount());\n    }\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Pagination);"]},"metadata":{},"sourceType":"module"}