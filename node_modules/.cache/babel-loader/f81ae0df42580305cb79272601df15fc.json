{"ast":null,"code":"import axios from 'axios'; // Fetch Page\n\nconst fetchSoldiersStart = () => {\n  return {\n    type: 'FETCH_SOLDIERS_START'\n  };\n};\n\nconst fetchSoldiersSuccess = soldiers => {\n  return {\n    type: 'FETCH_SOLDIERS_SUCCESS',\n    soldiers\n  };\n};\n\nconst fetchSoldiersFail = err => {\n  return {\n    type: 'FETCH_SOLDIERS_FAIL',\n    err\n  };\n};\n\nexport const fetchSoldiers = () => {\n  return dispatch => {\n    dispatch(fetchSoldiersStart());\n    axios.get('http://localhost:5000/api/range/0/10').then(response => {\n      console.log('!!!soldiers', response.data.soldiers);\n      dispatch(fetchSoldiersSuccess(response.data.soldiers));\n    }).catch(err => {\n      dispatch(fetchSoldiersFail(err));\n    });\n  };\n}; // add range\n\nconst addRangeSoldiersStart = () => {\n  return {\n    type: 'ADD_RANGE_SOLDIERS_START'\n  };\n};\n\nconst addRangeSoldiersSuccess = (soldiers, hasMore) => {\n  return {\n    type: 'ADD_RANGE_SOLDIERS_SUCCESS',\n    soldiers,\n    hasMore\n  };\n};\n\nconst addRangeSoldiersFail = err => {\n  return {\n    type: 'ADD_RANGE_SOLDIERS_FAIL',\n    err\n  };\n};\n\nexport const addRangeSoldiers = (offset, limit) => {\n  return dispatch => {\n    dispatch(addRangeSoldiersStart());\n    axios({\n      method: 'get',\n      url: \"http://localhost:5000/api/range/\".concat(offset, \"/\").concat(limit)\n    }).then(response => {\n      const soldiers = response.data.soldiers;\n      const hasMore = soldiers.length >= limit;\n      dispatch(addRangeSoldiersSuccess(soldiers, hasMore));\n    }).catch(err => {\n      dispatch(addRangeSoldiersFail(err));\n    });\n  };\n}; // load\n\nexport const reload = () => {\n  return dispatch => {\n    dispatch(fetchSoldiersStart());\n    axios({\n      method: 'get',\n      url: 'http://localhost:5000/api/'\n    }).then(response => {\n      dispatch(fetchSoldiersSuccess(response.data.soldiers));\n    }) // .then(res => {\n    //   dispatch(sortEmployees(\"\", true));\n    // })\n    .catch(err => {\n      dispatch(fetchSoldiersFail(err));\n    });\n  };\n};\nexport const loadMoreSuccess = () => {\n  return {\n    type: \"LOAD_MORE_SUCCESS\"\n  };\n};\nexport const loadMoreEnd = () => {\n  return {\n    type: \"LOAD_MORE_END\"\n  };\n}; // Fetch Sub Page\n\nconst fetchDirectSubsStart = () => {\n  return {\n    type: 'FETCH_DIRECT_SUBS_START'\n  };\n};\n\nconst fetchDirectSubsSuccess = directSubs => {\n  return {\n    type: 'FETCH_DIRECT_SUBS_SUCCESS',\n    directSubs\n  };\n};\n\nconst fetchDirectSubsFail = err => {\n  return {\n    type: 'FETCH_DIRECT_SUBS_FAIL',\n    err\n  };\n};\n\nexport const fetchDirectSubs = _id => {\n  return dispatch => {\n    dispatch(fetchDirectSubsStart());\n    axios({\n      method: 'get',\n      url: \"http://localhost:5000/api/\".concat(_id, \"/directSubs\")\n    }).then(response => {\n      dispatch(fetchDirectSubsSuccess(response.data.directSubs));\n    }).catch(err => {\n      dispatch(fetchDirectSubsFail(err));\n    });\n  };\n}; // Fetch Sup Page\n\nconst fetchSupStart = () => {\n  return {\n    type: 'FETCH_SUP_START'\n  };\n};\n\nconst fetchSupSuccess = soldier => {\n  return {\n    type: 'FETCH_SUP_SUCCESS',\n    soldier\n  };\n};\n\nconst fetchSupFail = err => {\n  return {\n    type: 'FETCH_SUP_FAIL',\n    err\n  };\n};\n\nexport const fetchSup = _id => {\n  return dispatch => {\n    dispatch(fetchSupStart());\n    axios({\n      method: 'get',\n      url: \"http://localhost:5000/api/\".concat(_id)\n    }).then(response => {\n      dispatch(fetchSupSuccess(response.data.soldier));\n      console.log('fetch soldier response.data', response.data.soldier);\n    }).catch(err => {\n      dispatch(fetchSupFail(err));\n    });\n  };\n}; // Create User\n\nconst createSoldierStart = () => {\n  return {\n    type: 'CREATE_SOLDIER_START'\n  };\n};\n\nconst createSoldierFail = error => {\n  return {\n    type: 'CREATE_SOLDIER_FAIL',\n    error\n  };\n};\n\nconst createSoldierSuccess = newSoldier => {\n  return {\n    type: 'CREATE_SOLDIER_SUCCESS',\n    newSoldier\n  };\n};\n\nexport const createSoldier = soldier => {\n  return dispatch => {\n    dispatch(createSoldierStart());\n    axios({\n      method: 'POST',\n      url: 'http://localhost:5000/api/create',\n      data: soldier\n    }).then(response => {\n      console.log('response.data.soldier', response.data.soldier);\n      dispatch(createSoldierSuccess(response.data.soldier));\n    }).then(response => {\n      dispatch(reload());\n    }).catch(error => {\n      dispatch(createSoldierFail(error));\n    });\n  };\n}; // Edit User\n\nconst editSoldierStart = () => {\n  return {\n    type: 'EDIT_SOLDIER_START'\n  };\n};\n\nconst editSoldierFail = error => {\n  return {\n    type: 'EDIT_SOLDIER_ERROR',\n    error\n  };\n};\n\nconst editSoldierSuccess = (id, soldier) => {\n  return {\n    type: 'EDIT_SOLDIER_SUCCESS',\n    id,\n    soldier\n  };\n};\n\nexport const editSoldier = (id, soldier) => {\n  return dispatch => {\n    dispatch(editSoldierStart());\n    axios.put(\"http://localhost:5000/api/edit/\".concat(id), soldier).then(response => {\n      dispatch(editSoldierSuccess(id, response.data.soldier));\n      dispatch(fetchSoldiers());\n    }).catch(error => {\n      dispatch(editSoldierFail(error));\n    });\n  };\n}; // Delete User\n\nconst deleteSoldierStart = () => {\n  return {\n    type: 'DELETE_SOLDIER_START'\n  };\n};\n\nconst deleteSoldierFail = error => {\n  return {\n    type: 'DELETE_SOLDIER_ERROR',\n    error\n  };\n};\n\nconst deleteSoldierSuccess = id => {\n  return {\n    type: 'DELETE_SOLDIER_SUCCESS',\n    id\n  };\n};\n\nexport const deleteSoldier = id => {\n  return dispatch => {\n    dispatch(deleteSoldierStart());\n    console.log('delete id is ', id);\n    axios.delete(\"http://localhost:5000/api/delete/\".concat(id)).then(response => {\n      dispatch(deleteSoldierSuccess(id));\n      console.log('delete soldier success');\n    }).catch(error => {\n      dispatch(deleteSoldierFail(error));\n    });\n  };\n}; // Upload Image\n\nconst uploadImageStart = () => {\n  return {\n    type: 'UPLOAD_IMAGE_START'\n  };\n};\n\nconst uploadImageSuccess = (image, filename, imgUrl) => {\n  return {\n    type: 'UPLOAD_IMAGE_SUCCESS',\n    image,\n    filename,\n    imgUrl\n  };\n};\n\nconst uploadImageFail = err => {\n  return {\n    type: 'UPLOAD_IMAGE_FAIL',\n    err\n  };\n};\n\nexport const uploadImage = (image, filename) => {\n  let data = new FormData();\n  data.append('image', image);\n  data.append('filename', filename);\n  console.log('data', data);\n  console.log('image', image);\n  return dispatch => {\n    dispatch(uploadImageStart());\n    axios({\n      method: 'post',\n      url: 'http://localhost:5000/api/image',\n      data: data\n    }).then(response => {\n      dispatch(uploadImageSuccess(image, filename, response.data.imgUrl));\n      console.log('response.data', response.data);\n    }).catch(err => {\n      dispatch(uploadImageFail(err));\n    });\n  };\n}; // Get Users\n// const getUsersStart = () => {\n//   return {\n//     type: 'GET_USERS_START'\n//   };\n// };\n// const getUsersFail = (error) => {\n//   return {\n//     type: 'GET_USERS_ERROR',\n//     error\n//   };\n// };\n// const getUsersSuccess = (response) => {\n//   return {\n//     type: 'GET_USERS_SUCCESS',\n//     data: response\n//   };\n// };\n// export const getUsers = () => {\n//   return (dispatch) => {\n//     dispatch(getUsersStart());\n//     axios\n//       .get('http://localhost:8080/api/', getUsers)\n//       .then(response => {\n//         dispatch(getUsersSuccess(response.data.users));\n//       })\n//       .catch(error => {\n//         dispatch(getUsersFail(error));\n//       });\n//   };\n// };\n// Redirect\n// export const redirect = () => {\n//   return {\n//     type: 'REDIRECT'\n//   };\n// };\n// export const resetRedirect = () => {\n//   return {\n//     type: 'RESET_REDIRECT'\n//   };\n// };\n// Sort\n// export const sortUsers = key => {\n//   return {\n//     type: 'SORT_USERS',\n//     key\n//   };\n// };\n// Search\n// const searchStart = () => {\n//   return {\n//     type: 'SEARCH_START'\n//   };\n// };\n// const searchSuccess = (users) => {\n//   return {\n//     type: 'SEARCH_SUCCESS',\n//     users,\n//   };\n// };\n// const searchFail = error => {\n//   return {\n//     type: 'SEARCH_FAIL',\n//     error\n//   };\n// };\n// export const search = (keyword) => {\n//   return (dispatch) => {\n//     dispatch(searchStart());\n//     axios\n//       .get(`http://localhost:8080/api/search/${keyword}`)\n//       .then(response => {\n//         console.log(`keyword is ${keyword}`);\n//         dispatch(searchSuccess(response.data));\n//       })\n//       .catch(error => {\n//         dispatch(searchFail(error));\n//       });\n//   }\n// }\n// export const changeSearchInput = (input) => {\n//   return {\n//     type: 'CHANGE_SEARCH_INPUT',\n//     input\n//   };\n// };\n// // Count Page\n// const getCountStart = () => {\n//   return {\n//     type: 'GET_COUNT_START'\n//   };\n// };\n// const getCountSuccess = count => {\n//   return {\n//     type: 'GET_COUNT_SUCCESS',\n//     count\n//   };\n// };\n// const getCountFail = err => {\n//   return {\n//     type: 'GET_COUNT_FAIL',\n//     err\n//   };\n// };\n// export const getCount = () => {\n//   return (dispatch) => {\n//     dispatch(getCountStart());\n//     axios\n//       .get('http://localhost:8080/api/count')\n//       .then(response => {\n//         const count = parseInt(response.data.count);\n//         dispatch(getCountSuccess(count));\n//       })\n//       .catch(err => {\n//         dispatch(getCountFail(err));\n//       });\n//   };\n// };\n// Set Status\n// export const setStatusCurPage = curPage => {\n//   return {\n//     type: 'SET_STATUS_CUR_PAGE',\n//     curPage\n//   };\n// };","map":{"version":3,"sources":["/Users/Flora/myapp/src/redux/action-creators/index.js"],"names":["axios","fetchSoldiersStart","type","fetchSoldiersSuccess","soldiers","fetchSoldiersFail","err","fetchSoldiers","dispatch","get","then","response","console","log","data","catch","addRangeSoldiersStart","addRangeSoldiersSuccess","hasMore","addRangeSoldiersFail","addRangeSoldiers","offset","limit","method","url","length","reload","loadMoreSuccess","loadMoreEnd","fetchDirectSubsStart","fetchDirectSubsSuccess","directSubs","fetchDirectSubsFail","fetchDirectSubs","_id","fetchSupStart","fetchSupSuccess","soldier","fetchSupFail","fetchSup","createSoldierStart","createSoldierFail","error","createSoldierSuccess","newSoldier","createSoldier","editSoldierStart","editSoldierFail","editSoldierSuccess","id","editSoldier","put","deleteSoldierStart","deleteSoldierFail","deleteSoldierSuccess","deleteSoldier","delete","uploadImageStart","uploadImageSuccess","image","filename","imgUrl","uploadImageFail","uploadImage","FormData","append"],"mappings":"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AACG,IAAT,CAAc+C,MAAhC,CAAnB,CAAR;AACAjD,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,QAAQ,CAACG,IAAtC;AACD,KARH,EASGC,KATH,CASST,GAAG,IAAI;AACZE,MAAAA,QAAQ,CAACsD,eAAe,CAACxD,GAAD,CAAhB,CAAR;AACD,KAXH;AAYD,GAdD;AAeD,CArBM,C,CAuBP;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import axios from 'axios';\n// Fetch Page\nconst fetchSoldiersStart = () => {\n  return {\n    type: 'FETCH_SOLDIERS_START'\n  };\n};\n\nconst fetchSoldiersSuccess = (soldiers) => {\n  return {\n    type: 'FETCH_SOLDIERS_SUCCESS',\n    soldiers\n  };\n};\n\nconst fetchSoldiersFail = err => {\n  return {\n    type: 'FETCH_SOLDIERS_FAIL',\n    err\n  };\n};\n\nexport const fetchSoldiers = () => {\n  return (dispatch) => {\n    dispatch(fetchSoldiersStart());\n    axios\n      .get('http://localhost:5000/api/range/0/10')\n      .then(response => {\n        console.log('!!!soldiers',response.data.soldiers);\n        dispatch(fetchSoldiersSuccess(response.data.soldiers));\n      })\n      .catch(err => {\n        dispatch(fetchSoldiersFail(err));\n      });\n  }\n}\n\n// add range\nconst addRangeSoldiersStart = () => {\n  return {\n    type: 'ADD_RANGE_SOLDIERS_START'\n  };\n};\n\nconst addRangeSoldiersSuccess = (soldiers, hasMore) => {\n  return {\n    type: 'ADD_RANGE_SOLDIERS_SUCCESS',\n    soldiers,\n    hasMore\n  };\n};\n\nconst addRangeSoldiersFail = err => {\n  return {\n    type: 'ADD_RANGE_SOLDIERS_FAIL',\n    err\n  };\n};\n\nexport const addRangeSoldiers = (offset, limit) => {\n  return dispatch => {\n    dispatch(addRangeSoldiersStart());\n    axios({\n      method: 'get',\n      url: `http://localhost:5000/api/range/${offset}/${limit}`\n    })\n      .then(response => {\n        const soldiers = response.data.soldiers;\n        const hasMore = soldiers.length >= limit;\n        dispatch(addRangeSoldiersSuccess(soldiers, hasMore));\n      })\n      .catch(err => {\n        dispatch(addRangeSoldiersFail(err));\n      });\n  };\n};\n\n// load\nexport const reload = () => {\n  return (dispatch) => {\n    dispatch(fetchSoldiersStart());\n    axios({\n      method: 'get',\n      url: 'http://localhost:5000/api/'\n    })\n      .then(response => {\n        dispatch(fetchSoldiersSuccess(response.data.soldiers));\n      })\n      // .then(res => {\n      //   dispatch(sortEmployees(\"\", true));\n      // })\n      .catch(err => {\n        dispatch(fetchSoldiersFail(err));\n      });\n  }\n};\n\nexport const loadMoreSuccess = () => {\n  return {\n    type:\"LOAD_MORE_SUCCESS\",\n  };\n}\n\nexport const loadMoreEnd = () => {\n  return {\n    type:\"LOAD_MORE_END\",\n  }\n}\n// Fetch Sub Page\nconst fetchDirectSubsStart = () => {\n  return {\n    type: 'FETCH_DIRECT_SUBS_START'\n  };\n};\n\nconst fetchDirectSubsSuccess = directSubs => {\n  return {\n    type: 'FETCH_DIRECT_SUBS_SUCCESS',\n    directSubs\n  };\n};\n\nconst fetchDirectSubsFail = err => {\n  return {\n    type: 'FETCH_DIRECT_SUBS_FAIL',\n    err\n  };\n};\n\nexport const fetchDirectSubs = _id => {\n  return (dispatch) => {\n    dispatch(fetchDirectSubsStart());\n    axios({\n      method: 'get',\n      url: `http://localhost:5000/api/${_id}/directSubs`\n    })\n      .then(response => {\n        dispatch(fetchDirectSubsSuccess(response.data.directSubs));\n      })\n      .catch(err => {\n        dispatch(fetchDirectSubsFail(err));\n      });\n  };\n};\n\n\n// Fetch Sup Page\nconst fetchSupStart = () => {\n  return {\n    type: 'FETCH_SUP_START'\n  };\n};\n\nconst fetchSupSuccess = soldier => {\n  return {\n    type: 'FETCH_SUP_SUCCESS',\n    soldier\n  };\n};\n\nconst fetchSupFail = err => {\n  return {\n    type: 'FETCH_SUP_FAIL',\n    err\n  };\n};\n\nexport const fetchSup = _id => {\n  return (dispatch) => {\n    dispatch(fetchSupStart());\n    axios({\n      method: 'get',\n      url: `http://localhost:5000/api/${_id}`\n    })\n      .then(response => {\n        dispatch(fetchSupSuccess(response.data.soldier));\n        console.log('fetch soldier response.data', response.data.soldier);\n      })\n      .catch(err => {\n        dispatch(fetchSupFail(err));\n      });\n  };\n};\n\n\n// Create User\nconst createSoldierStart = () => {\n  return {\n    type: 'CREATE_SOLDIER_START'\n  };  \n};\nconst createSoldierFail = (error) => {\n  return {\n    type:'CREATE_SOLDIER_FAIL',\n    error\n  };\n};\n\nconst createSoldierSuccess = (newSoldier) => {\n  return {\n    type:'CREATE_SOLDIER_SUCCESS',\n    newSoldier\n  }\n};\n\n \nexport const createSoldier = (soldier) => {\n  return (dispatch) => {\n    dispatch(createSoldierStart());\n    axios({\n      method: 'POST',\n      url: 'http://localhost:5000/api/create',\n      data: soldier\n    })\n      .then(response => {\n        console.log('response.data.soldier', response.data.soldier);\n        dispatch(createSoldierSuccess(response.data.soldier));\n      })\n      .then(response => {\n        dispatch(reload());  \n      })\n      .catch(error => {\n        dispatch(createSoldierFail(error));\n      });\n  };\n};\n\n// Edit User\nconst editSoldierStart = () => {\n  return {\n    type: 'EDIT_SOLDIER_START'\n  };\n};\n\nconst editSoldierFail = (error) => {\n  return {\n    type: 'EDIT_SOLDIER_ERROR',\n    error\n  };\n};\n\nconst editSoldierSuccess = (id, soldier) => {\n  return {\n    type: 'EDIT_SOLDIER_SUCCESS',\n    id,\n    soldier\n  };\n};\n\nexport const editSoldier = (id, soldier) => {\n  return (dispatch) => {\n    dispatch(editSoldierStart());\n    axios\n      .put(`http://localhost:5000/api/edit/${id}`, soldier)\n      .then(response => {\n        dispatch(editSoldierSuccess(id, response.data.soldier));\n        dispatch(fetchSoldiers());\n      })\n      .catch(error => {\n        dispatch(editSoldierFail(error));\n      });\n   };\n};\n\n// Delete User\nconst deleteSoldierStart = () => {\n  return {\n    type: 'DELETE_SOLDIER_START'\n  };\n};\n\nconst deleteSoldierFail = (error) => {\n  return {\n    type: 'DELETE_SOLDIER_ERROR',\n    error\n  };\n};\n\nconst deleteSoldierSuccess = (id) => {\n  return {\n    type: 'DELETE_SOLDIER_SUCCESS',\n    id\n  };\n};\n\nexport const deleteSoldier = (id) => {\n  return (dispatch) => {\n    dispatch(deleteSoldierStart());\n    console.log('delete id is ', id);\n    axios\n      .delete(`http://localhost:5000/api/delete/${id}`)\n      .then(response => {\n        dispatch(deleteSoldierSuccess(id));\n        console.log('delete soldier success');\n      })\n      .catch(error => {\n        dispatch(deleteSoldierFail(error));\n      });\n  };\n};\n\n\n// Upload Image\nconst uploadImageStart = () => {\n  return {\n    type: 'UPLOAD_IMAGE_START'\n  };\n};\n\nconst uploadImageSuccess = (image, filename, imgUrl) => {\n  return {\n    type: 'UPLOAD_IMAGE_SUCCESS',\n    image,\n    filename,\n    imgUrl\n  };\n};\n\nconst uploadImageFail= err => {\n  return {\n    type: 'UPLOAD_IMAGE_FAIL',\n    err\n  };\n};\n\nexport const uploadImage = (image, filename) => {\n  let data = new FormData();\n  data.append('image', image);\n  data.append('filename', filename);\n  console.log('data', data);\n  console.log('image', image);\n  return (dispatch) => {\n    dispatch(uploadImageStart());\n    axios({\n      method: 'post',\n      url: 'http://localhost:5000/api/image',\n      data: data\n    })\n      .then(response => {\n        dispatch(uploadImageSuccess(image, filename, response.data.imgUrl));\n        console.log('response.data', response.data);\n      })\n      .catch(err => {\n        dispatch(uploadImageFail(err));\n      });\n  }\n};\n\n// Get Users\n// const getUsersStart = () => {\n//   return {\n//     type: 'GET_USERS_START'\n//   };\n// };\n\n// const getUsersFail = (error) => {\n//   return {\n//     type: 'GET_USERS_ERROR',\n//     error\n//   };\n// };\n\n// const getUsersSuccess = (response) => {\n//   return {\n//     type: 'GET_USERS_SUCCESS',\n//     data: response\n//   };\n// };\n\n// export const getUsers = () => {\n//   return (dispatch) => {\n//     dispatch(getUsersStart());\n//     axios\n//       .get('http://localhost:8080/api/', getUsers)\n//       .then(response => {\n//         dispatch(getUsersSuccess(response.data.users));\n//       })\n//       .catch(error => {\n//         dispatch(getUsersFail(error));\n//       });\n//   };\n// };\n\n// Redirect\n// export const redirect = () => {\n//   return {\n//     type: 'REDIRECT'\n//   };\n// };\n\n// export const resetRedirect = () => {\n//   return {\n//     type: 'RESET_REDIRECT'\n//   };\n// };\n\n\n// Sort\n// export const sortUsers = key => {\n//   return {\n//     type: 'SORT_USERS',\n//     key\n//   };\n// };\n\n\n// Search\n// const searchStart = () => {\n//   return {\n//     type: 'SEARCH_START'\n//   };\n// };\n\n// const searchSuccess = (users) => {\n//   return {\n//     type: 'SEARCH_SUCCESS',\n//     users,\n//   };\n// };\n\n// const searchFail = error => {\n//   return {\n//     type: 'SEARCH_FAIL',\n//     error\n//   };\n// };\n\n// export const search = (keyword) => {\n//   return (dispatch) => {\n//     dispatch(searchStart());\n//     axios\n//       .get(`http://localhost:8080/api/search/${keyword}`)\n//       .then(response => {\n//         console.log(`keyword is ${keyword}`);\n//         dispatch(searchSuccess(response.data));\n//       })\n//       .catch(error => {\n//         dispatch(searchFail(error));\n//       });\n//   }\n// }\n\n// export const changeSearchInput = (input) => {\n//   return {\n//     type: 'CHANGE_SEARCH_INPUT',\n//     input\n//   };\n// };\n\n\n\n// // Count Page\n// const getCountStart = () => {\n//   return {\n//     type: 'GET_COUNT_START'\n//   };\n// };\n\n// const getCountSuccess = count => {\n//   return {\n//     type: 'GET_COUNT_SUCCESS',\n//     count\n//   };\n// };\n\n// const getCountFail = err => {\n//   return {\n//     type: 'GET_COUNT_FAIL',\n//     err\n//   };\n// };\n\n// export const getCount = () => {\n//   return (dispatch) => {\n//     dispatch(getCountStart());\n//     axios\n//       .get('http://localhost:8080/api/count')\n//       .then(response => {\n//         const count = parseInt(response.data.count);\n//         dispatch(getCountSuccess(count));\n//       })\n//       .catch(err => {\n//         dispatch(getCountFail(err));\n//       });\n//   };\n// };\n\n\n// Set Status\n// export const setStatusCurPage = curPage => {\n//   return {\n//     type: 'SET_STATUS_CUR_PAGE',\n//     curPage\n//   };\n// };\n\n"]},"metadata":{},"sourceType":"module"}